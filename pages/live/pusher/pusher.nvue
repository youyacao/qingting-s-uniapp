<template>
	<view class="body" :style="{'height': `${windowHeight}px`}">
		<!-- <live-pusher :style="{'height': `${windowHeight}px`}" id='livePusher' ref="livePusher" class="livePusher" :url="url" :mode="modeList[pusherMode]" :muted="true" :enable-camera="true"
		 :auto-focus="true" :beauty="1" whiteness="2" aspect="9:16" @statechange="statechange" @netstatus="netstatus" @error="error"></live-pusher> -->
		<!-- <view class="btn-list">
			<button class="btn" @tap="start">{{ status ? '正在推流' : '开始推流' }}</button>
			<button class="btn" @tap="pause">暂停推流</button>
			<button class="btn" @tap="stop">停止推流</button>
			<button class="btn" @tap="switchCamera">切换摄像头</button>
			<button class="btn" @click="resume">resume</button>
			<button class="btn" @click="snapshot">快照</button>
			<button class="btn" @click="startPreview">开启摄像头预览</button>
			<button class="btn" @click="stopPreview">关闭摄像头预览</button>
		</view> -->
		<view class="btn-box" v-if="show">
			<view class="btn-item" @tap="_back">
				<image class="btn-item__icon" src="/static/images/fanhui.png" mode="aspectFit"></image>
				<text class="btn-item__text">返回</text>
			</view>
			<view class="btn-item" @tap="SwitchCamera">
				<image class="btn-item__icon" src="/static/images/fanzhuan.png" mode="aspectFit"></image>
				<text class="btn-item__text">翻转</text>
			</view>
			<view class="btn-item">
				<view class="btn-item__play">
					<image class="play-icon" src="/static/images/poweroff-circle-fill.png" mode="aspectFit"
						@tap="StopPush" v-if="status"></image>
					<image class="play-icon" src="/static/images/play-circle-fill.png" mode="aspectFit" @tap="StartPush"
						v-else>
					</image>
				</view>
			</view>
			<view class="btn-item" @tap="_beauty">
				<image class="btn-item__icon" src="/static/images/meihua.png" mode="aspectFit"></image>
				<text class="btn-item__text">美颜</text>
			</view>
			<view class="btn-item" @tap="_moreMenu">
				<image class="btn-item__icon" src="/static/images/gengduo1.png" mode="aspectFit"></image>
				<text class="btn-item__text">更多</text>
			</view>
		</view>
		<view :style="{ width: windowWidth, height: windowHeight }" class="devices">
			<youyacao-MHTXLive id="mainMap" :style="{ width: windowWidth, height: windowHeight }" ref="myMHLive">
			</youyacao-MHTXLive>
		</view>
	</view>
</template>

<script>
	const TuSDKImageEdit = uni.requireNativePlugin('youyacao-TuSDKImageEdit')
	const TuSDKEdit = uni.requireNativePlugin('youyacao-TuSDKEdit')
	const modal = weex.requireModule('modal')
	const picker = weex.requireModule('picker')
	const globalEvent = weex.requireModule('globalEvent')
	import {
		mapGetters,
		mapState
	} from 'vuex'
	import {
		StartLive
	} from '@/common/api.js'

	export default {
		data() {
			return {
				url: '',
				context: null,
				status: false,
				modeList: ['SD', 'HD', 'FHD'],
				show: true,
				Live: null
			};
		},
		onReady() {
			// this.context = uni.createLivePusherContext("livePusher", this)
			if (this.context) {
				this.startPreview()
			}
		},
		onLoad(options) {
			this._startLive()
			this.url = options.url
		},
		computed: {
			...mapGetters(['windowHeight', 'windowWidth', 'statusBarHeight']),
			...mapState(['pusherMode'])
		},
		methods: {
			_moreMenu() {
				picker.pick({
					items: ['贴纸', '特效', '哈哈镜', '视频编辑测试']
				}, event => {
					console.log(event)
					if (event.result === 'success') {
						switch (event.data) {
							case 0:
								this.Tiezhi()
								break
							case 1:
								this.Texiao()
								break
							case 2:
								this.Hahajing()
								break
							default:
								this.chooseVideo()
						}
					}
				})
			},
			chooseVideo() {
				uni.chooseVideo({
					count: 9,
					sourceType: ['camera', 'album'],
					success: (res) => {
						console.log(TuSDKEdit)
						TuSDKEdit.edit({
							list: [res.tempFilePath]
						}, result => {
							const msg = JSON.stringify(result);
							uni.showModal({
								content: msg,
								showCancel: false
							});
						});
					}
				})
			},
			_beauty() {
				this.show = false
				this.Live = this.$refs.myMHLive
				this.Live.Meiyan(result => {
					const msg = JSON.stringify(result);
					const {
						type
					} = result
					if (type === 'ViewHide') {
						this.show = true
					}
				})
			},
			Texiao() {
				this.show = false
				const Live = this.$refs.myMHLive
				Live.Texiao(result => {
					// {
					// 	"type": "ViewShow",
					// 	"code": 0,
					// 	"msg": "视图显示"
					// }
					if (result.type === 'ViewHide') {
						this.show = true
					}
				})
			},
			Hahajing() {
				this.show = false
				const Live = this.$refs.myMHLive
				Live.Hahajing(result => {
					if (result.type === 'ViewHide') {
						this.show = true
					}
				})
			},
			Tiezhi() {
				this.show = false
				const Live = this.$refs.myMHLive
				Live.Tiezhi(result => {
					if (result.type === 'ViewHide') {
						this.show = true
					}
				})
			},
			SwitchCamera() {
				const Live = this.$refs.myMHLive
				Live.SwitchCamera()
			},
			StartPush() {
				const Live = this.$refs.myMHLive
				Live.StartPush({
					URL: this.url
				}, res => {
					if (res.type === 'StartPush') {
						uni.showToast({
							title: '推流成功',
							icon: 'none'
						})
						this.status = true
					}
				});
			},
			StopPush() {
				const Live = this.$refs.myMHLive
				Live.StopPush(result => {
					// {
					// 	"type": "StopPush",
					// 	"code": 0,
					// 	"msg": "停止推流"
					// }
					if (result.type === 'StopPush') {
						uni.showToast({
							title: '已暂停推流',
							icon: 'none'
						})
						this.status = false
					}
				})
			},
			_alert() {
				modal.alert({
					message: '敬请期待',
					okTitle: '确认'
				}, function() {
					console.log('alert callback')
				})
			},
			_back() {
				modal.confirm({
					message: '返回将自动结束推流，是否返回?',
					okTitle: '确定',
					cancelTitle: '取消'
				}, value => {
					if (value === '确定') {
						this.$refs.myMHLive.backbutton()
						uni.navigateBack({
							delta: 2
						})
					}
				})
			},
			_startLive() {
				StartLive().then(({
					code,
					data
				}) => {
					const {
						rtmp_push_url
					} = data
					this.url = rtmp_push_url
				})
			},
			statechange(e) {
				console.log("statechange:" + JSON.stringify(e));
			},
			netstatus(e) {
				console.log("netstatus:" + JSON.stringify(e));
			},
			error(e) {
				console.log("error:" + JSON.stringify(e));
			},
			start() {
				this.context.start({
					success: (a) => {
						this.status = true
						uni.showToast({
							title: '推流成功',
							icon: 'none'
						})
						console.log("livePusher.start:" + JSON.stringify(a));
					}
				})
			},
			close: function() {
				this.context.close({
					success: (a) => {
						console.log("livePusher.close:" + JSON.stringify(a));
					}
				});
			},
			snapshot: function() {
				this.context.snapshot({
					success: (e) => {
						console.log(JSON.stringify(e));
					}
				});
			},
			resume: function() {
				this.context.resume({
					success: (a) => {
						console.log("livePusher.resume:" + JSON.stringify(a));
					}
				});
			},
			pause() {
				this.context.pause({
					success: (a) => {
						this.status = false
						uni.showToast({
							title: '已暂停推流',
							icon: 'none'
						})
						console.log("livePusher.pause:" + JSON.stringify(a));
					}
				});
			},
			stop() {
				this.context.stop({
					success: (a) => {
						this.status = false
						console.log(JSON.stringify(a));
					}
				});
			},
			switchCamera: function() {
				this.context.switchCamera({
					success: (a) => {
						console.log("livePusher.switchCamera:" + JSON.stringify(a));
					}
				});
			},
			startPreview() {
				this.context.startPreview({
					success: (a) => {
						console.log("livePusher.startPreview:" + JSON.stringify(a));
					}
				});
			},
			stopPreview: function() {
				this.context.stopPreview({
					success: (a) => {
						console.log("livePusher.stopPreview:" + JSON.stringify(a));
					}
				});
			}
		}
	}
</script>

<style lang="scss" scoped>
	.btn-item__text {
		margin-top: 6rpx;
		font-size: 28rpx;
		color: #FFFFFF;
		text-align: center;
	}

	.btn-item__icon {
		width: 50rpx;
		height: 50rpx;
	}

	.btn-item__play {
		width: 115rpx;
		height: 115rpx;
		// background-color: rgba($color: #000000, $alpha: 0.2);
		background-color: #FFFFFF;
		border-radius: 50%;
		align-items: center;
		justify-content: center;
	}

	.play-icon {
		width: 100rpx;
		height: 100rpx;
	}

	.btn-item {
		flex: 1;
		align-items: center;
		justify-content: center;
	}

	.btn-box {
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		padding: 24rpx 0;
		flex-direction: row;
		align-items: center;
	}

	.btn-list {
		position: absolute;
		right: 0;
		bottom: 0;
		left: 0;
	}

	.livePusher {
		width: 750rpx;
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}
</style>
